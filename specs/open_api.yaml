openapi: '3.0.2'
info:
  title: API Data Backend
  version: '1.0'
servers:
  - url: http://0.0.0.0:8000

paths:
  /auth/login:
    get:
      security:
        - basicAuth: []
      tags:
        - auth
      summary: Authenticate user with credentials
      responses:
        '200':
          description: User authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenization'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/check_token:
    get:
      security:
        - bearerAuth: []
      tags:
        - auth
      summary: Verify authorization token
      responses:
        '200':
          description: User authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenization'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /user:
    get:
      tags:
      - User
      responses:
        '200':
          description: Get all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/safe_user"
      responses:
        '200':
          description: Create a new user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /user/{id}:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: cuid
    get:
      tags:
        - User
      responses:
        '200':
          description: Get a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/safe_user"
      responses:
        '200':
          description: Update a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - User
      responses:
          '200':
            description: Update a user
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/user"
          '400':
            description: Error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/error"

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    tokenization:
      type: object
      properties:
        refresh_token:
            type: string
            format: cuid
            description: Refresh token
        access_token:
          type: string
          format: cuid
          description: Access token
    safe_user:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    user:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          default: user
          enum:
            - user
            - admin
            - manager
        createdAt:
          type: string
        updatedAt:
          type: string
    error:
      type: object
      properties:
        error:
          type: string
